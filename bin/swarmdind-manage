#!/bin/bash
set -eo pipefail

# Update the -advertise address based on the interface saved on the enviornment CONSUL_BIND_INTERFACE (the one that base image consul uses)

preStart() 
{
    _log "Consul advertise $(ip -o -4 addr list $CONSUL_BIND_INTERFACE | head -n1 | awk '{print $4}' | cut -d/ -f1) address"
    docker rm -f ${DIND_NAME:-dind} || true
}

preStop() 
{
#    consul leave
    docker rm -f ${DIND_NAME:-dind}
    _log "Swarmdind leave"
}

postStop() 
{
#    consul leave
    docker rm -f ${DIND_NAME:-dind}
    _log "Swarmdind leave"
}

# Check if a member of a raft. If consul info returns an error we'll
# pipefail and exit for a failed health check.
# If we have no peers then try to join the raft via the CNS svc record.
# Once a node is connected to at least one other peer it'll get the rest
# of the raft via the Consul LAN gossip.
# If we end up joining ourselves we just retry on the next health check
# until we've got the whole cluster together.

# Check if there is no members connected, then join to the members on the docker service using
# the dns name from docker service tasks.${consul} so we get all members in one consul join call.

health() {
    return 0
}

_log() {
    echo "    [CP] $@"
}

# ---------------------------------------------------
# parse arguments

# Get function list
func=($(declare -F -p | cut -d " " -f 3))

until
    if [ ! -z "$1" ]; then
        # check if the first arg is a function in this file, or use a default
        if [[ " ${funcs[@]} " =~ " $1 " ]]; then
            cmd=$1
            shift 1
        fi

        $cmd "$@"
        if [ $? == 127 ]; then
            help
        fi

        exit
    else
        health
    fi
do
    echo
done
